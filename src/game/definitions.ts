import { GameMode } from '../utils/GameMode';

const definitions = {
  D2: 'An attacker could take over the port or socket that the server normally uses.',
  D3: "An attacker could try one credential after another and there's nothing to slow them down (online or offline).",
  D4: 'An attacker can anonymously connect, because we expect authentication to be done at a higher level.',
  D5: 'An attacker can confuse a client because there are too many ways to identify a server.',
  D6: "An attacker can spoof a server because identifiers aren't stored on the client and checked for consistency on re-connection (that is, there's no key persistence).",
  D7: "An attacker can connect to a server or peer over a link that isn't authenticated (and encrypted).",
  D8: 'An attacker could steal credentials stored on the server and reuse them (for example, a key is stored in a world readable file).',
  D9: 'An attacker who gets a password can reuse it (Use stronger authenticators).',
  D10: 'An attacker can choose to use weaker or no authentication.',
  DJ: 'An attacker could steal credentials stored on the client and reuse them.',
  DQ: "An attacker could go after the way credentials are updated or recovered (account recovery doesn't require disclosing the old password).",
  DK: "Your system ships with a default admin password, and doesn't force a change.",
  DA: "You've invented a new Spoofing attack.",
  E2: 'An attacker can modify your build system and produce signed builds of your software.',
  E3: 'An attacker can take advantage of your custom key exchange or integrity control which you built instead of using standard crypto.',
  E4: 'Your code makes access control decisions all over the place, rather than with a security kernel.',
  E5: "An attacker can replay data without detection because your code doesn't provide timestamps or sequence numbers.",
  E6: 'An attacker can write to a data store your code relies on.',
  E7: "An attacker can bypass permissions because you don't make names canonical before checking access permissions.",
  E8: "An attacker can manipulate data because there's no integrity protection for data on the network.",
  E9: 'An attacker can provide or control state information.',
  E10: "An attacker can alter information in a data store because it has weak/open permissions or includes a group which is equivalent to everyone ('anyone with a Facebook account').",
  EJ: 'An attacker can write to some resource because permissions are granted to the world or there are no ACLs.',
  EQ: 'An attacker can change parameters over a trust boundary and after validation (for example, important parameters in a hidden field in HTML, or passing a pointer to critical memory).',
  EK: 'An attacker can load code inside your process via an extension point.',
  EA: "You've invented a new Tampering attack.",
  C2: "An attacker can pass data through the log to attack a log reader, and there's no documentation of what sorts of validation are done.",
  C3: 'A low privilege attacker can read interesting security information in the logs.',
  C4: "An attacker can alter digital signatures because the digital signature system you're implementing is weak, or uses MACs where it should use a signature.",
  C5: 'An attacker can alter log messages on a network because they lack strong integrity controls.',
  C6: 'An attacker can create a log entry without a timestamp (or no log entry is timestamped).',
  C7: 'An attacker can make the logs wrap around and lose data.',
  C8: 'An attacker can make a log lose or confuse security information.',
  C9: 'An attacker can use a shared key to authenticate as different principals, confusing the information in the logs.',
  C10: 'An attacker can get arbitrary data into logs from unauthenticated (or weakly authenticated) outsiders without validation.',
  CJ: "An attacker can edit logs and there's no way to tell (perhaps because there's no heartbeat option for the logging system).",
  CQ: 'An attacker can say "I didn\'t do that," and you\'d have no way to prove them wrong.',
  CK: 'The system has no logs.',
  CA: "You've invented a new Repudiation attack.",
  B2: "An attacker can brute-force file encryption because there's no defense in place (example defense, password stretching).",
  B3: 'An attacker can see error messages with security sensitive content.',
  B4: "An attacker can read content because messages (say, an email or HTTP cookie) aren't encrypted even if the channel is encrypted.",
  B5: "An attacker may be able to read a document or data because it's encrypted with a non-standard algorithm.",
  B6: "An attacker can read data because it's hidden or occluded (for undo or change tracking) and the user might forget that it's there.",
  B7: "An attacker can act as a 'man in the middle' because you don't authenticate endpoints of a network connection.",
  B8: 'An attacker can access information through a search indexer, logger, or other such mechanism.',
  B9: 'An attacker can read sensitive information in a file with bad ACLs.',
  B10: 'An attacker can read information in files with no ACLs.',
  BJ: 'An attacker can discover the fixed key being used to encrypt.',
  BQ: "An attacker can read the entire channel because the channel (say, HTTP or SMTP) isn't encrypted.",
  BK: "An attacker can read network information because there's no cryptography used.",
  BA: "You've invented a new Information Disclosure attack.",
  A2: 'An attacker can make your authentication system unusable or unavailable.',
  A3: 'An attacker can make a client unavailable or unusable but the problem goes away when the attacker stops (client, auth, temporary).',
  A4: 'An attacker can make a server unavailable or unusable but the problem goes away when the attacker stops (server, auth, temporary)',
  A5: 'An attacker can make a client unavailable or unusable without ever authenticating but the problem goes away when the attacker stops (client, anonymous, temporary).',
  A6: 'An attacker can make a server unavailable or unusable without ever authenticating but the problem goes away when the attacker stops (server, anonymous, temporary).',
  A7: 'An attacker can make a client unavailable or unusable and the problem persists after the attacker goes away (client, auth, persist).',
  A8: 'An attacker can make a server unavailable or unusable and the problem persists after the attacker goes away (server, auth, persist).',
  A9: 'An attacker can make a client unavailable or unusable without ever authenticating and the problem persists after the attacker goes away (client, anon, persist).',
  A10: 'An attacker can make a server unavailable or unusable without ever authenticating and the problem persists after the attacker goes away (server, anon, persist).',
  AJ: 'An attacker can cause the logging subsystem to stop working.',
  AQ: 'An attacker can amplify a Denial of Service attack through this component with amplification on the order of 10 to 1.',
  AK: 'An attacker can amplify a Denial of Service attack through this component with amplification on the order of 100 to 1.',
  AA: "You've invented a new Denial of Service attack.",
  T2: 'An attacker has compromised a key technology supplier.',
  T3: 'An attacker can access the cloud service which manages your devices.',
  T4: 'An attacker can escape from a container or other sandbox.',
  T5: 'An attacker can force data through different validation paths which give different results.',
  T6: "An attacker could take advantage of permissions you set, but don't use.",
  T7: 'An attacker can provide a pointer across a trust boundary, rather than data which can be validated.',
  T8: 'An attacker can enter data that is checked while still under their control and used later on the other side of a trust boundary.',
  T9: "There's no reasonable way for a caller to figure out what validation of tainted data you perform before passing it to them.",
  T10: "There's no reasonable way for a caller to figure out what security assumptions you make.",
  TJ: 'An attacker can reflect input back to a user, like cross site scripting.',
  TQ: 'You include user-generated content within your page, possibly including the content of random URLs.',
  TK: 'An attacker can inject a command that the system will run at a higher privilege level.',
  TA: "You've invented a new Elevation of Privilege attack.",
};

function isCardInDefinitions(card: string): card is keyof typeof definitions {
  return card in definitions;
}

export function getThreatDescription(card: string, gameMode: GameMode): string {
  if (gameMode === GameMode.EOP && isCardInDefinitions(card)) {
    return definitions[card];
  }
  return '';
}
